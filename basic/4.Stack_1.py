# -*- coding: utf-8 -*-

# 수식의 괄호 쌍

"""
수식의 괄호 쌍 문제는 주어진 수식의 괄호 쌍이 올바른지 판단하는 문제
(())   - O
())(   - X
)))()()) - X
((())())  - O

직접 눈으로 보면 올바른지 판단할 수 있긴한데 컴퓨터로 해결하려면??
놀랍게도 스택으로 O(N)에 해결할 수있다는점!
단골 문제는 아니지만 잊을만하면 형태를 살짝 바꾸거나 응용해서 나오는 문제의 유형

첫번째로 생각할 수 있는 방법은 ()의 갯수를 세는건데 둘의 갯수가 다르다면 올바르지 않다는것.
하지만 갯수가 같아도 )( 이러한 경우는 올바르지 않을 수 있다.
그렇다면 붙어있는 ()를 계속 지운다면??
((())()) -> (()()) -> (()) -> () -> 끝
이 방법을 리스트로 구현할 경우 최대 N/2번 중간에 있는 원소의 삭제가 발생하기 때문에,
O(N^2)이고 Linked List일 경우 O(N)
그런데, 스택을 이용한다면?? 앞에서부터 읽어나갈때 닫는 괄호는 가장 최근에 들어온 여는 괄호를 없애버리는 명령?

#스택을 이용한 풀이
{(((){})()))} -> { ( ( ( 다음 ) 가 나오는데 이때 ()를 같이 삭제한다.
그러면, { ( ( { 다음 또 } 이게 나오는데 {} 같이 삭제 
{ ( ( 다음 ) 가 나오는데 이때 ()같이 삭제
{ ( ( 다음 또 )가 나오는데 () 같이 삭제
{ ( 다음 ) 삭제
{ } 삭제 순으로 진행
즉, 여는 괄호가 나오면 스택에 넣고 닫는 괄호가 나오면 스택이 비어있는지를 확인하고,
비어있다면 잘못된 괄호 문자열이고, 스택이 비어있지 않다면 꼭대기를 살펴보고 맞는 괄호인 경우 pop
짝이 맞지 않을 경우에는 잘못된 괄호 문자열으로 풀 수 있다.
"""


# https://www.acmicpc.net/problem/9012 괄호 문제

T = int(input())
for i in range(T):
    VPS = list(input())
    while len(VPS) != 0:
        if VPS[0] != '(' or VPS[-1] != ')':
            print("NO")
            break
        else:
            if '(' and ')' in VPS:
                VPS.remove('(')
                VPS.remove(')')
            else:
                print('NO')
                break
    if len(VPS) == 0:
        print('YES')
