# -*- coding: utf-8 -*-

# 시간복잡도와 기초 코드작성 요령

# 시간복잡도(Time-Complexcity) -> 입력의 크기(N)와 문제를 해결하는데 걸리는 시간의 상관관계

"""
ex)
대회장에 N명의 사람들이 일렬로 서있다. 
거기서 이름이 '가나다'인 사람을 찾기 위해 사람들에게 이름을 물어볼 것이다.
이름을 물어보고 대답을 듣는데 1초가 걸린다면 '가나다'인 사람을 찾기 위해 얼마만큼 시간이 필요할까?
(=시간복잡도) N에 비례할텐데, [최선의 경우 1초, 최악의 경우 N초, 평균적으로 N/2초]의 시간이 필요하다.

위의 조건에서 이름순으로 서있었다면?? [최악의 경우 logN, 최선의 경우 1초]가 걸릴적이다.
"""

# 점근표기법(Big-O notation) -> 함수의 결과값을 시간복잡도에서 가장 큰 지수승만 남겨 나타내는 방법
"""
ex)
O(5N+7)=O(N), O(3N^2+13N+4) = O(N^2), O(2N^2logN+N^2+3)=O(N^2logN)
"""

# 공간복잡도(Space complexity) -> 입력의 크기와 문제를 해결하는데 걸리는 공간의 상관관계
"""
ex)
입력크기가 N에 대하여 2차원배열이 필요하면 O(N^2)의 공간복잡도가 필요하며,
따로 배열등 저장공간이 필요없다면 O(1)의 공간복잡도를 가진다.
대부분 시간복잡도로 인해 문제를 틀리고.....보통 512MB가 int형 변수 1.2억개를 담을수있다고 생각하면 좋겠다
TC(Test case)에서 틀리면 오답이 일반적이지만, 맞은 TC만큼 부분점수를 줄때도 있다.
마지막으로 항상 연습만이 답이라고 꾸준함이 중요한듯....
"""
